<H3><a name="top">Wintin 95 Help Index</a></H3>
<p>
<a href="#_legal"><H4>Legal Notices</H4></a>
<a href="#_started"><H4>What Is Wintin 95?</H4></a>
<a href="#_installing"><H4>Installing Wintin</H4></a>
<a href="#_starting"><H4>Starting Wintin</H4></a>
<a href="#_connecting"><H4>Connecting to a Mud</H4></a>
<a href="#_intro_commands"><H4>Introduction to Commands</H4></a>
<a href="#_bugs"><H4>Tintin can damage you!</H4></a>
<a href="#_new"><H4>New in this release</H4></a>
<i><br>
William Lees
<br>
william@wintin.org
<br>
http://www.wintin.org
</i>
</p><p><H4>Wintin 95 Commands</H4></a>
<table>
<tr><td><a href="#action">action</a></td>
<td><a href="#alias">alias</a></td>
<td><a href="#all">all</a></td>
<td><a href="#antisubstitute">antisubstitute</a></td>
<td><a href="#bell">bell</a></td>
<td><a href="#boss">boss</a></td>
</tr><tr>
<td><a href="#char">char</a></td>
<td><a href="#cr">cr</a></td>
<td><a href="#echo">echo</a></td>
<td><a href="#end">end</a></td>
<td><a href="#gag">gag</a></td>
<td><a href="#help">help</a></td>
</tr><tr>
<td><a href="#highlight">highlight</a></td>
<td><a href="#history">history</a></td>
<td><a href="#if">if</a></td>
<td><a href="#ignore">ignore</a></td>
<td><a href="#info">info</a></td>
<td><a href="#killall">killall</a></td>
</tr><tr>
<td><a href="#lists">lists</a></td>
<td><a href="#log">log</a></td>
<td><a href="#loop">loop</a></td>
<td><a href="#map">map</a></td>
<td><a href="#mark">mark</a></td>
<td><a href="#math">math</a></td>
<td><a href="#message">message</a></td>
</tr><tr>
<td><a href="#nop">nop</a></td>
<td><a href="#openwin">openwin</a></td>
<td><a href="#path">path</a></td>
<td><a href="#pathdir">pathdir</a></td>
<td><a href="#presub">presub</a></td>
<td><a href="#push">push</a></td>
</tr><tr>
<td><a href="#read">read</a></td>
<td><a href="#redraw">redraw</a></td>
<td><a href="#remove">remove</a></td>
<td><a href="#retab">retab</a></td>
<td><a href="#return">return</a></td>
<td><a href="#savepath">savepath</a></td>
</tr><tr>
<td><a href="#select">select</a></td>
<td><a href="#session">session</a></td>
<td><a href="#showme">showme</a></td>
<td><a href="#snoop">snoop</a></td>
<td><a href="#sound">sound</a></td>
<td><a href="#speedwalk">speedwalk</a></td>
</tr><tr>
<td><a href="#split">split</a></td>
<td><a href="#substitute">substitute</a></td>
<td><a href="#suspend">suspend</a></td>
<td><a href="#system">system</a></td>
<td><a href="#tabadd">tabadd</a></td>
<td><a href="#tabdelete">tabdelete</a></td>
</tr><tr>
<td><a href="#tablist">tablist</a></td>
<td><a href="#textin">textin</a></td>
<td><a href="#tick">tick</a></td>
<td><a href="#tickoff">tickoff</a></td>
<td><a href="#tickset">tickset</a></td>
<td><a href="#ticksize">ticksize</a></td>
</tr><tr>
<td><a href="#tolower">tolower</a></td>
<td><a href="#togglesubs">togglesubs</a></td>
<td><a href="#toupper">toupper</a></td>
<td><a href="#unaction">unaction</a></td>
<td><a href="#unalias">unalias</a></td>
<td><a href="#unantisubstitute">unantisubstitute</a></td>
</tr><tr>
<td><a href="#ungag">ungag</a></td>
<td><a href="#unhighlight">unhighlight</a></td>
<td><a href="#unpath">unpath</a></td>
<td><a href="#unsplit">unsplit</a></td>
<td><a href="#unsubstitute">unsubstitute</a></td>
<td><a href="#unvariable">unvariable</a></td>
</tr><tr>
<td><a href="#update">update</a></td>
<td><a href="#variable">variable</a></td>
<td><a href="#verbatim">verbatim</a></td>
<td><a href="#version">version</a></td>
<td><a href="#wildcard">wildcard</a></td>
<td><a href="#wizlist">wizlist</a></td>
</tr><tr>
<td><a href="#write">write</a></td>
<td><a href="#writesession">writesession</a></td>
<td><a href="#zap">zap</a></td>
</tr>
</table>



<a href="#top">Back</a><hr><a name="_new"><H4>New in this release</H4></a>
<p>Version 1.73</p>
<p>A fix to stop Wintin exiting when several sessions are active and one is closed. Many thanks to C L Wu for this fix.<p>
<p>A fix to tickset, which will make it work better when it's confined to a time window.</p>
<p>A larger Edit Definitions dialog, with word wrap on the definition itself.</p>
<p>No more Windows Help file! Sorry, but the format is just too ugly to work with.
From now on, the help will be a standalone html document (the thing you are
reading now). Mathew Mamet has agreed to maintain it, so look forward to some
improvements.</p>
<p>Version 1.70
</p><p>Mud Sound Protocol (MSP) is now supported. You must ftp the sounds to yor computer first - Wintin does not yet automatically download them on-the-fly. Under the edit menu you will find an option to configure various aspects of MSP.
</p><p>The highlighting code has been rewritten. 
</p><p>Wintin now supports <a href="#lists">lists</a>.
</p><p>Version 1.64
</p><p>You can now compare strings in if-statements, and if-statements can have 'else' clauses. This functionality was lifted from Tintin++ version 1.64, the version that never made it out of beta. As far as I can see, Wintin now has all the functionality of 1.64 that is relevant: a lot of the work in 1.64 was to do with screen handling and doesn't have any relevance to Wintin.
</p><p>Function keys, cursor keys and various others can be used as shortcuts for commands via an extension to alias. 
</p><p>The full set of 16 foreground and 16 background colours should now work ok with an ANSI mud, and also in the highlight command.
</p><p>You can specify a startup file on the command line, which will allow you to make separate desktop icons for the different muds or characters you play.
</p><p>Text wrap has been improved: it now attempts to wrap at the end of a word. The wrap point is definable.
</p><p>There is a 'select all' command to help you take a quick log on the fly.
</p><p>Action and alias support a 'remainder' argument, %r, which will be substituted by the remaining text not used in other % arguments.
</p><p>There are various small changes to help newbies. The FAQs I get include:
</p><p>I started the program but I don't know what to do next
</p><p>- There's now a 'Connect' menu item on the file menu which builds a #session command for you.
</p><p>It says 'no tab.txt file, no completion list. What's wrong?
</p><p>- I removed that message, it didn't really serve much purpose. 
</p><p>I can't get it to load a file on startup
</p><p>-	As well as looking for the traditional tintinrc file, Wintin now looks for tintinrc.txt, which is I hope a more natural file for Windows users.
</p><p>I've included a bug fix from Feng Chen which ensures that Wintin disconnects from the mud properly when you close a session. Many thanks Feng :)
</p><p>There are also bug fixes for the #return and #map commands, and for command history (the ! operator).
</p><p>Version 1.20
</p><p>Tired of losing settings and aliases when your session closes? The new update_update command lets you save changes back into the common lists.
</p><p>The Definitions command on the Edit menu provides a graphical interface to aliases, actions, variables and so on.
</p><p>Finally, there are some bug fixes which should resolve the remaining problems with ANSI color.
</p><p>Version 1.10
</p><p>Wintin now includes text and background coloring and font selection. Be careful not to set black text on a black background by mistake (!) and remember that in a proportional font (such as Times Roman) you get more characters on a line but text will not line up in columns as you might expect.
</p><p>Wintin will now do its best to remember window sizes and positions from one invocation to the next.
</p><p>All settings are now maintained in the user's registry rather than in an .ini file.
</p><p>There is a preset variable, $time. See help on <a href="#variable">variable</a> for details.
</p><p><a href="#tickset">tickset</a> now takes an optional parameter. See its help for details.
</p>

<a href="#top">Back</a><hr><a name="_legal"><H4>Legal Notices</H4></a>
<p>You may use this version freely for personal use, and give it to others on the same basis. The program and help files are copyright: all rights are reserved and all other use is prohibited. In particular you may not exploit Wintin 95 for profit or make any charge for distributing it without obtaining my agreement in writing.
</p><p>I'm sure the code is riddled with bugs. This program is intended to be used for pleasure. I make no representations that it is fit for any purpose, and I won't be held responsible for any consequences should it fail to work properly, which it probably will.
</p><p>I will probably distribute any future versions of Wintin 95 on the same basis, but I reserve the right not to.
</p><p>Wintin 95 incorporates a port of the public-domain Tintin++ code. This legal notice is not intended to make a claim on that code or restrict the rights of its authors in any way.
</p><p>William Lees
</p><p>william@wintin.org
http://www.wintin.org
</p>

<a href="#top">Back</a><hr><a name="_new"><H4>Getting Started</H4></a>
<p>What is Wintin 95?
</p><p>Wintin 95 is a 'mud client': that is to say it is a program especially designed for playing text-based muds. It will work on a Windows 95 or Windows NT machine which is connected to the internet directly or via a modem and PPP or SLIP. Wintin 95 will also work over a straight 'dial-up' connection to a host. For decent performance, use Wintin 95 on a 486/66 or Pentium. It will probably be OK on slower machines, but you may find that it (or your machine, blame what you will) can't keep up with the fast scroll that you sometimes get on muds, particularly when fighting in a group.
</p><p>There are several reasons for using Wintin 95 to mud. First of all, it's a good Telnet program. It has a large scrollback buffer (approximately 2000 lines). If you scroll back, Wintin 95 doesn't jump back to the current insertion point every time some new text arrives. Also you can split a window so that you can scroll back through the history while watching any new stuff that arrives. These are all features that I've wanted in *any* telnet program and never really found, which is why I started on Wintin 95 in the first place. Wintin 95 is also pretty fast compared to most Windows-based Telnets, and it has some special features in it designed to handle heavy scroll.
</p><p>The other features that make Wintin 95 good for mudding come from its Tintin++ background. It has a powerful 'alias' facility, which lets you set up an unlimited number of shortcut commands for the things you find yourself doing a lot. It has an 'action' facility which you can use to automate things. For example you can set up actions to eat whenever you are hungry, fill a barrel every time you pass a fountain and so on. And you can roll your own colouring if you are using a mud that doesn't do colouring itself. Finally you can create special windows for different things: for example you can arrange that any text that is spoken to you by another character is captured in its own window where you will see it quite distinctly without it being swamped in scroll. And each window has 2000 lines of scrollback history, so you will keep things that people say to you for a long time...
</p><p>Is Wintin 95 only good for hack-and-slash style muds? Well, it's true that it comes from a hack-and-slash background, and a lot of the commands are particularly useful in a fighting and spellcasting environment. But the general features described above should be useful in any mudding environment - and possibly in other contexts as well. Make your own mind up - and if there are particular features that would make it more useful on a particular kind of mud, let me know.
</p><p>Lastly, a bit about Wintin 95's background. The program is really in two distinct lumps. The first bit is the Windows stuff: Wintin 95 is a Microsoft Foundation Classes application written in MS Visual C++. I wrote that bit myself. The second bit is the Tintin++ stuff. Tintin++ has been around as a Unix mud client for a long time. It is published in source code form, and at one stage was ported to Windows NT as a console application. The Tintin++ bit of Wintin 95 is based largely on the Windows NT console port, and I have made a full acknowledgement to the many people who have worked on Tintin++ in the Wintin 95 'about' screen.
</p><p>I've included the Tintin 1.5 manual, with kind thanks to David Wagner for allowing me to do so. If you haven't used Tintin or Wintin before, you really need to read this - it will get you going and make sure that you understand all the features available. There's some extra functionality in Wintin, which you'll find listed in the 'what's new' section of this help file.
</p>
<a href="#top">Back</a><hr><a name="_installing"><H4>Installing Wintin 95</H4></a>
<p>To install Wintin 95, copy the files included in the Zip to a directory somewhere, and create an icon for WINTIN 95.EXE.
</p>
<a href="#top">Back</a><hr><a name="_starting"><H4>Starting Wintin 95</H4></a>
<p>To start Wintin 95, double-click on the icon you created for it.
</p><p>When Wintin 95 starts, there is a single open window: the Wintin 95 window. Because Wintin 95 is written to be used with text-based muds, most of the commands are typed into it rather than being selected from a menu. You may like to review the menus now to see what is available: there is context-sensitive help available should you need it, which you probably won't, unless you're new to Windows.
</p><p>Even when there are multiple windows open in Wintin 95, you can type commands into any window, you don't need to make a particular window active first. All windows have horizontal and vertical splitters on them, which work like the splitters in Excel and other Windows applications. All windows have a scrollback buffer which remembers roughly the last 2000 lines displayed in that window.
</p><p>If you hit Enter a few times, you will see Wintin 95 complain that there is no active session. A session is the thing you set up to communicate with a mud. To set one up, pull down the File menu and select the Connect menu item. Just fill in the mud's address and port, and away you go. Alternatively, look at the help on the session_session command, or go to the next introductory section, Connecting to a Mud_connecting.
</p>
<a href="#top">Back</a><hr><a name="_connecting"><H4>Connecting to a Mud</H4></a>
<p>To connect to a mud you start a session. You need to think of a name for the session: I suggest you use the mud's name. You then type a command whch depends on the kind of connection you have to the Internet.
</p><p>If your PC is directly connected to the Internet, or if you use a dialup connection to the Internet, read the part titled 'Connecting via the Internet' below. Otherwise, if you are going to dial a host (say some kind of Unix machine) via a modem, read the part titled 'Asynch Connections' which follows.
</p><p>If you don't understand what the paragraph above means, don't worry about it. The chances are you use the Internet: just read the following section 'Connecting via the Internet' and forget about the 'Asynch connections' bit underneath it. If you don't understand what an asynch connection is, you almost certainly don't use one.
</p><p>Connecting via the Internet
</p><p>To connect to a mud, start up your internet connection, start Wintin, pull down the File menu and select 'Connect'. Fill in your mud's address and port number, and press OK.
</p><p>If you get problems, check your internet connection is ok and that your mud is alive. Try some other way to connect to your mud, maybe it's down at the moment. Try some other mud through Wintin - if that works ok, the chances are your mud is down.
</p><p>If things still don't work out, you may have one of two show-stopping problems. Firstly, I know that Wintin doesn't work with some kinds of firewall. So if you're mudding from work and you can't get through, it's probably the firewall. Unfortunately I don't have one I can play with, so until some kind soul does some detective work and tells me exactly what the problem is, I can't do much about this one. Sorry. 
</p><p>Secondly, Wintin is a 32 bit program and it MUST HAVE a 32 bit Winsock: WINSOCK32.DLL, NOT WINSOCK.DLL. There are still some people out there that are using Trumpet or some other way of connecting to the Internet that only provides a 16 bit Winsock. You can't use Wintin with that method. You can't use Real Audio or Navigator 4 or any of the other cool pieces of software either, so do yourself a favour and upgrade to WINSOCK32. It's FREE with Windows 95 or Windows 98, and it's on your Windows installation CD. Your ISP will help you set it up.
</p><p>You can also connect to your mud by typing a command in rather than using the menu item. Look at the description of the session command for details.
</p><p>Asynch Connections
</p><p>If you are going to dial up a host such as a Unix machine and therefore don't have direct connection of any sort to the Internet, first work out the following:
</p><p>- the port number your modem is on (COM1, COM2 or whatever)
</p><p>- the speed (baud rate) at which you want to talk to your modem
</p><p>- the number of data bits, parity type and number of stop bits that your host expects
</p><p>If you have any trouble working out this information, you can probably figure it out by looking at whatever terminal program you use at the moment and cribbing the settings. If you don't use a terminal program at the moment you are reading the wrong section: you have an Internet connection and should read the section above called 'Connecting via the Internet'.
</p><p>To connect to a modem on port 1 at 38400 baud with 8 data bits, no parity and one stop bit you would type
</p><p>#ses sloth async,1,38400,8,n,1
</p><p>To connect to a modem on port 3 at 9600 baud with 7 data bits, even parity and one stop bit you would type
</p><p>#ses sloth async,3,9600,7,e,1
</p><p>Once the session has started you must type the AT commands to the modem to make it dial and then log in to your host.
</p><p>When you are using Wintin 95 through a com port, you may well find that everything you type is displayed on the screen twice: this is because Wintin 95 echoes the characters back to you as you type, and most hosts will echo everything back as they receive it. You will notice that Wintin 95 is echoing the command as you type it, whereas the host echoes it back after any aliases and so on have been processed. To avoid this double echo, see if the host you connect to has a command which will suppress its echo (this is typically used with 'simplex' terminals).
</p><p>Now please move on to the next introductory session, <a href="#_intro_commands">Introduction to Commands</a> to read how to take advantage of some of Wintin 95's capabilities once you have connected.
</p><p>
<a href="#top">Back</a><hr><a name="_intro_commands"><H4>Introduction to Commands</H4></a>
</p><p>You may have noticed in the coverage of the session command that Wintin 95 commands start with a special character, #, and can be abbreviated: for example the session command was shown in the examples abbreviated to #ses. You will have to experiment to see how much you can abbreviate a particular command. The special character that starts commands can be changed if necessary: see <a href="#char">char</a>.
</p><p>There are two features of Wintin 95 which you can start to use right away. Firstly you can type several commands on the same line, separating them by a semicolon. Tintin++ will split them up before sending them to the mud. So to go 3 rooms west and say 'foo', you might type 
</p><p>w;w;w;say foo
</p><p>Secondly, you can use <a href="#speedwalk">speedwalk</a> to walk around rapidly. For example you could abbreviate the above command to
</p><p>3w;say foo
</p><p>The next thing you will probably want to get to grips with is <a href="#alias">alias</a>, which allows you to make an abbreviation for a commonly used command. For example you could make an abbreviation 'was' for the commands 'wake;stand'. To do this you would type
</p><p>#alias was {wake;stand}
</p><p>Notice here that the curly brackets are used to show Wintin 95 that the two commands 'wake;stand' form the alias. Otherwise it would assume that 'stand' was a command in its own right which followed the #alias command. You can put the curly brackets around any of the arguments following a Wintin 95 command.
</p><p>As you build up useful aliases, you will want to store them in a file so you don't have to type them in each session. Look at <a href="#read">read</a> and <a href="#write">write</a> to see how to do this.
</p><p>Next you will probably want to look at the <a href="#highlight">highlight</a> command to see how to colour text and send it to multiple windows, and the <a href="#action">action</a> command to see how to script automatic actions. But before you play with actions, please read the next introductory section, <a href="#_bugs">What should I know about 'Tintin++ Bugs?'</a>. Wintin 95 contains some powerful features which unscrupulous players may try to use against you, and these are connected with how you write your actions. The next section will explain how to avoid the pitfalls.
</p><p>Finally, to help you start off, the file WINTIN 95.CMD, which was supplied with Wintin 95, contains some example commands.
</p><p>
<a href="#top">Back</a><hr><a name="_bugs"><H4>What Should I Know about 'Tintin++ Bugs'?</H4></a>
</p><p>There are two 'features' of Tintin++ which have been exploited by players and are common knowledge in the mudding world.
</p><p>The first is simply that the commonly used version of Tintin++ for Unix tends to display passwords on the screen instead of hiding them. This is a plain and simple bug and it has been corrected in Wintin 95, so you don't need to worry about it: if Wintin 95 does display your password on the screen please let me know and I'll do my best to fix the problem, but with any luck you will find that it doesn't.
</p><p>The second is more of a feature than a bug but it can have very serious consequences and once you have read about the <a href="#action">action</a> command you should be aware of it. There is a very simple way of avoiding it, which is what this section is all about.
</p><p>The problem is this. Suppose that you create an action like this:
</p><p>#action {There were %0 coins.} {split %0}
</p><p>Now suppose that someone says or emotes something like
</p><p>Butthead says 'There were 0;rem all;give all butthead; coins
</p><p>What happens is that Wintin 95 assigns '0;rem all;give all butthead' to %0 and sends off the line 
</p><p>split 0;rem all;give all butthead;
</p><p>which results in your giving all your stuff to Butthead.
</p><p>To get around this problem, always use $ instead of % in the second argument to #action, like this:
</p><p>#action {There were %0 coins.} {split $0}
</p><p>The $ works exactly like %, except that the ;s and everything following them are removed without being processed so that the same words from Butthead would simply make your Wintin 95 say
</p><p>split 0
</p><p>Once again: you will not encounter this problem provided that you always use $ in the second argument to #action instead of using %. Check this in any file of actions that people give you, in case they have overlooked it.
</p><p>You shouldn't encounter any other problems as a result of using Wintin 95, but beware of the <a href="#gag">gag</a> command: if you gag everything that someone does, they may harass you without your noticing it!
</p>
<a href="#top">Back</a><hr><a name="action"><H4>Action</H4></a>
<p>format:	#action [{string}] [{command(s)}] [{priority}]
</p><p>The [] signify optional arguments.
</p><p>If you have not read it already, please read What should I know about 'Tintin++ Bugs?'_bugs before experimenting with actions.
</p><p>Have the client search for a certain string of text from the mud, if the client receives that string, it will execute the command(s).  Variables %0-9 are substituted from the input string, and can be used in the command(s) side of the command. A further variable, %r, is set to all the 'remaining' text after any other variables you have used. 
</p><p>Previously, all actions were stored alphabetically in the list, which meant that some of the important actions could exist at the end of the list (which could result in slow reaction times for those actions). Priorities have been added to actions now.  The third parameter of the command will tell how important Wintin 95 should regard this action (0 most important, 9 least important).  If no priority is given, a default value of 5 is assigned. If the string to be searched for starts with a ^, only the beginning of the line will be searched.
</p><p>If #action is typed with no arguments, all actions defined are listed.
</p><p>If #action is typed with only one argument, actions defined that match that argument are displayed.  The * character is valid in this case to use as a wildcard_wildcard.
</p><p>examples:
</p><p>#action {Grimmy has arrived} {smile grimmy} {2}
</p><p>If Grimmy enters the room, you will automatically smile at her.  The priority setting of two, means that it should be stored close to the top of the list. (all actions with 1 and 0 set for priorities will be checked before this one).
</p><p> 
</p><p>#action {^TICKCOUNTER: 5 seconds} {sleep} {0}
</p><p>Since this string is 'anchored', it will only be triggered if it starts at the beginning of a line.  If your mud has a tickcounter set up like this, this action will make you sleep at 5 seconds to tick.
</p><p>#action 
</p><p>list all actions
</p><p>#action *tell*
</p><p>list all actions with the word 'tell' in them.
</p>
<a href="#top">Back</a><hr><a name="Alias"><H4>Alias</H4></a>
</p><p>format:	#alias [{word}] [{command(s)}]
</p><p>format:	#alias [word] [command]
</p><p>the [] signify optional arguments.
</p><p>Define a word that actually means a longer string.  Useful for commands repeated often, or commands that are very lengthy.  You can have multiple commands aliased to a single word, if you enclose the alias in {}.
</p><p>If the command(s) include variables %0-9, these are substituted as part of the parsing.  %0 is set to all text after the word was input, %1 is set to the first word following the aliased word, and %2 is the second, and so on. A further variable, %r, is set to all the 'remaining' text after any other variables you have used.
</p><p>If the #alias command is typed without any arguments, all aliases defined will be listed.
</p><p>If the #alias command is typed with only 1 argument, occurrences matching the input string are shown.  The * character is valid in this word to act as a wildcard_wildcard.
</p><p>You can assign aliases to function keys or some other keys. These aliases can't have variables. Use alias names from the following table to assign an alias to the associated function key:
</p>
<table>
<tr>VK_F2 to VK_F12
</tr><tr>VK_BACK
</tr><tr>VK_TAB
</tr><tr>VK_ESCAPE
</tr><tr>VK_PGUP
</tr><tr>VK_NEXT
</tr><tr>VK_END
</tr><tr>VK_HOME
</tr><tr>VK_LEFT
</tr><tr>VK_RIGHT
</tr><tr>VK_UP
</tr><tr>VK_DOWN
</tr><tr>VK_INSERT
</tr><tr>VK_DELETE
</tr><tr>VK_NUMPAD0 to VK_NUMPAD9
</tr><tr>VK_MULTIPLY
</tr><tr>VK_ADD
</tr><tr>VK_SUBTRACT
</tr><tr>VK_DECIMAL
</tr><tr>VK_DIVIDE
</tr><tr>VK_NUMLOCK
</tr><tr>VK_SCROLL
</tr>
</table>
<p>You can't reassign F1, which is used for help. See the examples below to see how these are used.
</p><p>examples:
</p><p>#alias gb get bread bag
</p><p>typing gb at the prompt would be sent as 'get bread bag'.
</p><p>#alias ws {wake;stand}
</p><p>since ws aliases a multiple command, you must use the braces.
</p><p>#alias heal cast 'heal' %1
</p><p>typing 'heal valgar' at the prompt would be sent as 'cast 'heal' valgar' since it will put the word valgar into %1
</p><p>#alias VK_F2 flee
</p><p>flee if you hit the F2 key
</p><p>#alias VK_UP n
</p><p>go north when you hit the uparrow key 
</p><p>#alias
</p><p>list all aliases
</p><p>#alias he*
</p><p>list all aliases that start with the letters 'he'
</p><p>#alias mtell %1 [Tom says:] %r
</p><p>'mtell valgar come help me at the Griffin' will be sent as 'tell valgar [Tom says:] come help me at the Griffin'
<a href="#top">Back</a><hr><a name="All"><H4>All</H4></a>
</p><p>format:	 	#all {string}
</p><p>#all string
</p><p>Send a command to all open sessions.
</p><p>example:
</p><p>#all {shout I'm multicharing!}
</p>
<a href="#top">Back</a><hr><a name="Antisubstitute"><H4>Antisubstitute</H4></a>
<p>format:      #antisubstitute {string}
</p><p>             #antisubstitute string
</p><p>Will cause any line that contains the string specified to not be checked for substitutes and gags.  The ^ char starting a string will tell the client to only antisubstitute lines that START with the string specified.
</p><p>examples:
</p><p>#antisub {^You}
</p><p>any line starting with 'You' will not be checked for subs.
</p><p>#antisub {^You%0hit.}
</p><p>lines that start with 'You', and also contain 'hit.' will not be subbed.
</p><p>#antisub {annihilate}
</p><p>any line that contains the word 'annihilate' will not be subbed.
</p>
<a href="#top">Back</a><hr><a name="Bell"><H4>Bell</H4></a>
<p>format:	#bell
</p><p>sends a beep to your terminal.
</p><p>example:
</p><p>#action {tells you} {#bell}
</p><p>will chime any time anyone tells you anything.
</p>
<a href="#top">Back</a><hr><a name="Boss"><H4>Boss</H4></a>
<p>format:	#boss
</p><p>puts some fake text on your screen so nobody knows you're mudding.
</p>
<a href="#top">Back</a><hr><a name="Char"><H4>Char</H4></a>
<p>format:	#char character
</p><p>lets you redefine your Wintin 95_character, the character that starts all commands.
</p><p>example:
</p><p>#char /
</p><p>all commands must then start with a /, instead of a #.  
</p><p>If you load a coms file, the first character it sees is set to your Wintin 95 char.
</p>
<a href="#top">Back</a><hr><a name="CR"><H4>CR</H4></a>
<p>format:	      #cr
</p><p>Sends a carriage return to the session.  Useful for aliases that need carriage returns.
</p><p>
<a href="#top">Back</a><hr><a name="Echo"><H4>Echo</H4></a>
</p><p>format:       #echo
</p><p>Echo is used to see what actions are being triggered.  #echo toggles this feature on and off.
</p><p>
<a href="#top">Back</a><hr><a name="End"><H4>End</H4></a>
</p><p>format:	#end
</p><p>terminate Wintin 95.
</p><p>
<a href="#top">Back</a><hr><a name="Gag"><H4>Gag</H4></a>
<p>format:	#gag {string}
</p><p>Just like substitute, but the . is added for you.  Removes any line that contains the string.
</p><p>Beware that Gag may expose you to thievery: if you gag someone's name, you won't see any descriptions of what they do. Likewise if you gag a fighting action and someone puts the same action in their description, you may not see them come and go.
</p>
<a href="#top">Back</a><hr><a name="Help"><H4>Help</H4></a>
</p><p>format:	#help [command]
</p><p>get a listing of commands, or get help and a specific command.
</p><p>
<a href="#top">Back</a><hr><a name="Highlight"><H4>Highlight</H4></a>
</p><p>format:	#highlight [{type}] [{string}]
</p><p>	#highlight [type] [{string}]
</p><p>The [, ] signify optional arguments.
</p><p>The higlight command is used to allow you to highlight strings of text from the mud, and to direct text to special windows.
</p><p>The %0-9 variables can be used as 'wildcards' that will match with any text. They are useful for highlighting a complete line. You may start the string to highlight with a ^ to highlight text only if it begins the line.
</p><p>You can specify a colour by its number or its name. Background colours are specified by the name prefixed by a 'b'. Possible colours are:  
</p>
<table>
<tr><td>0</td><td>black</td>
</tr><tr><td>1</td><td>red</td>
</tr><tr><td>2</td><td>green</td>
</tr><tr><td>3</td><td>brown</td>
</tr><tr><td>4</td><td>blue</td>
</tr><tr><td>5</td><td>magenta</td>
</tr><tr><td>6</td><td>cyan</td>
</tr><tr><td>7</td><td>white</td>
</tr><tr><td>8</td><td>charcoal</td>
</tr><tr><td>9</td><td>light red</td>
</tr><tr><td>10</td><td>light green</td>
</tr><tr><td>11</td><td>yellow</td>
</tr><tr><td>12</td><td>light blue</td>
</tr><tr><td>13</td><td>light magenta</td>
</tr><tr><td>14</td><td>light cyan</td>
</tr><tr><td>16</td><td>b black</td>
</tr><tr><td>17</td><td>b red</td>
</tr><tr><td>18</td><td>b green</td>
</tr><tr><td>19</td><td>b brown</td>
</tr><tr><td>20</td><td>b blue</td>
</tr><tr><td>21</td><td>b magenta</td>
</tr><tr><td>22</td><td>b cyan</td>
</tr><tr><td>23</td><td>b white</td>
</tr><tr><td>24</td><td>b charcoal</td>
</tr><tr><td>25</td><td>b light red</td>
</tr><tr><td>26</td><td>b light green</td>
</tr><tr><td>27</td><td>b yellow</td>
</tr><tr><td>28</td><td>b light blue</td>
</tr><tr><td>29</td><td>b light magenta</td>
</tr><tr><td>30</td><td>b light cyan</td>
</tr><tr><td>31</td><td>b white</td>
</tr>
</table>
</p><p>	examples:
</p><p>#high {blue} {Valgar}
</p><p>print every occurrence of 'Valgar' in blue
</p><p>#high {6} {%0tells you%1}
</p><p>print every complete line that contains 'tells you' in color 6
</p><p>#high red {^You}
</p><p>Redden any 'You' that starts a line
</p><p>#high {green} {Grimne} 
</p><p>each time the word Grimne appeared, it's to be shown in green.
</p><p>To direct lines to a special Wintin 95 window, you should first set up the window using the <a href="#openwin">openwin</a> command. Then use Highlight to highlight any text to send to the window, only instead of a colour number specify the window number plus 60. Any lines containing the text will be sent to the special window.
</p><p>examples:
</p><p>#high {61} {%0tells you%1}
</p><p>display every complete line that contains 'tells you' in window 1
</p><p>#high {64} {^You}
</p><p>display every line that starts with 'You' in window 4
</p><p>The lines highlighted in this way will be displayed in the main Wintin 95 window as well as in the special window. If you don't want them displayed in the main window, use the window number plus 50 instead of the window number plus 60:
</p><p>#high {51} {%0tells you%1}
</p><p>display every complete line that contains 'tells you' in window 1
</p><p>#high {54} {^You}
</p><p>display every line that starts with 'You' in window 4
</p><p>(see <a href="#openwin">openwin</a> for more examples)
</p><p>
<a href="#top">Back</a><hr><a name="History"><H4>History</H4></a>
</p><p>format:	#history
</p><p>The history command will display a listing of the most recent keyboard
</p><p>input.
</p><p>
<a href="#top">Back</a><hr><a name="If"><H4>If</H4></a>
</p><p>format:	#if {conditional} {command(s)}
</p><p>	#if {conditional} {command(s)} else {command(s)}
</p><p>The if command works similarly to an if statement in other languages, and is loosely based on the way C handles its conditional statements.  When an if command is encountered, the conditional statement is evaluated, and if TRUE (any non-zero result) the command(s) are executed.  The if statement is only evaluated if it is read, so you must nest the if statement inside another statement (most likely an action command).  The conditional is evaluated exactly the same as in the math command, only instead of storing the result, the result is used to determine whether to execute the command(s).  See <a href="#math">math</a> for more information.
</p><p>#if can compare numerical or string values. Strings must be enclosed in square brackets as in the example below.
</p><p>examples:
</p><p>#action {%0 gives you %1 gold coins} {#if {%%1>5000} {thank %%0} else {burp}}
</p><p>if someone gives you more than 5000 coins, thank them. If they give you less, burp.
</p><p>the %%1 and %%0 belong to the action, and not to the if, and that is why
</p><p>the double % are needed.
</p><p>#action {^&lt;hp:%0 } {#if {%%0<100} {flee}}
</p><p>If your status prompt is of the form &lt;hp:100 ma:50 mo:100>, this action will get your hit points, compare them to 100, if less than 100, flee
</p><p>#action {Jake} {#if {[$ill]=[cold]} {cough}
</p><p>When you see Jake, cough if the variable 'ill' is set to 'cold'.
</p><p>
<a href="#top">Back</a><hr><a name="Ignore"><H4>Ignore</H4></a>
</p><p>format:	#ignore 
</p><p>Toggle actions on and off. If off, no actions will be checked for.
</p><p>
<a href="#top">Back</a><hr><a name="Info"><H4>Info</H4></a>
</p><p>format:		#info
</p><p>Displays the number of actions, aliases, variables, substitutes, antisubstitutes, and highlights for the current session.  If no session is active, then the statistics on the defaults are given.
</p><p>
<a href="#top">Back</a><hr><a name="Killall"><H4>Killall</H4></a>
</p><p>format:	#killall
</p><p>Killall deletes all aliases, actions, subs, antisubs, highlights, variables in one fell swoop.  Useful now, so you don't have to exit Wintin 95 to load up a new coms file.
</p>
<a href="#top">Back</a><hr><a name="lists"><H4>Lists</H4></a>
<p>A list is just a variable containing some text, but it is split into list 'elements' by commas. Here's an example of a list containing three elements:
</p><p>#var {foo} {fee, fie, foe}
</p><p>You can use a list just like a normal variable, for example
</p><p>#showme $foo
</p><p>produces
</p><p>fee, fie, foe
</p><p>You can also use the special commands <a href="#push">push</a>, <a href="#remove">remove</a> and <a href="#select">select</a>, a new variant of the <a href="#loop">loop</a> command, and the @ variable modifier. See the command descriptions for details.
</p>
<a href="#top">Back</a><hr><a name="Log"><H4>Log</H4></a>
</p><p>format:	#log {filename}
</p><p>Log session to a file.
</p><p>
<a href="#top">Back</a><hr><a name="Loop"><H4>Loop</H4></a>
</p><p>format:	#loop {start,finish} {command(s)}
</p><p>or:          #loop {listname} {commands}
</p><p>Like a for-next loop, will loop from start to finish incrementing or decrementing by 1 each time through.  The value of the loop variable is placed in %0, and can be used in the command(s).  If start>finish, it will loop backwards.
</p><p>examples:
</p><p>#loop {1,3} {get all %0.corpse} 
</p><p>equivalent to the following:
</p><p>  get all 1.corpse;get all 2.corpse;get all 3.corpse
</p><p>#loop {3,1} {drop %0.key}
</p><p>equivalent to
</p><p>  drop 3.key;drop 2.key;drop 1.key
</p><p>In the second form of the loop command, the commands are executed once for each element of the list, with the list elements placed in %0. 
</p><p>Examples:
</p><p>#var {recalls} {fred, tony, bill}
</p><p>#loop {$recalls} {recite recall %0}
</p><p>is equivalent to
</p><p>recite recall fred; recite recall tony; recite recall bill
</p><p>#loop {$@recalls} {recite recall %0}
</p><p>wll generate the same commands, and will empty the list afterwards. 
</p><p>
<a href="#top">Back</a><hr><a name="Map"><H4>Map</H4></a>
</p><p>format:	#map {direction}
</p><p>Will add a direction to the end of the current path.  Useful for mapping while following someone.
</p><p>example:
</p><p>#action {$leader leaves %0.} {#map {%%0}}
</p><p>if the person stored in $leader leaves the room, the direction is added to the end of the path.
</p><p>
<a href="#top">Back</a><hr><a name="Mark"><H4>Mark</H4></a>
</p><p>format:        #mark
</p><p>Clear the path list and start the new path at your current location.
</p>
<a href="#top">Back</a><hr><a name="Math"><H4>Math</H4></a>
<p>format:	#math {variable} {expression}
</p><p>Performs math functions and stored the result in a variable.  The math follows a C-like precedence, as follows, with the top of the list having the highest priority.
</p>
<table>
<tr>
<td>Operator</td>
<td>Function</td>
</tr><tr><td>!</td>
<td>logical not</td>
</tr><tr><td>*</td>
<td>integer multiply</td>
</tr><tr><td>/</td>
<td>integer divide</td>
</tr><tr><td>+</td>
<td>integer addition</td>
</tr><tr><td>-</td>
<td>integer subtraction</td>
</tr><tr><td>></td>
<td>greater than (result is non-zero or zero)</td>
</tr><tr><td>>=</td>
<td>greater than or equal (result is non-zero or zero) </td>
</tr><tr><td>&lt;</td>
<td>less than (result is non-zero or zero)</td>
</tr><tr><td><=</td>
<td>less than or equal (result is non-zero or zero)</td>
</tr><tr><td>= or ==</td>
<td>equals (result is non-zero or zero)</td>
</tr><tr><td>!=</td>
<td>not equal (result is non-zero or zero)</td>
</tr><tr><td>& or &&</td>
<td>logical and (result is non-zero or zero)</td>
</tr><tr><td>| or ||</td>
<td>logical or (result is non-zero or zero)</td>
</tr>
</table>

<p>True is any non-zero number, and False is zero.  In the expression, you may use T and F as true and false.  Parentheses () have highest precedence, so inside the parentheses is always evaluated first.
</p><p>examples:
</p><p>#math {heals} {$mana/40}
</p><p>Assuming there is a variable $mana, divide its value by 40 and store the 
</p><p>result in $heals.
</p><p>#action {^You receive %0 experience} {updatexp %0}
</p><p>#alias updatexp {#math {xpneed} {$xpneed-%%0}
</p><p>Let's say you have a variable which stores xp needed for your next level.  The above will modify that variable after every kill, showing the amount still needed.
</p><p>
<a href="#top">Back</a><hr><a name="Message"><H4>Message</H4></a>
</p><p>format:	#message {type}
</p><p>This will toggle off and on the messages dealing with a certain type of command.  The possible message types are alias, action, antisub, sub variable, and highlight.  This is very helpful if you are using #math and #if, and setting a lot of variables, so you don't keep getting the Variable Set messages.
</p><p>example:
</p><p>#message {variable}
</p><p>toggles whether messages dealing with variables will be shown.
</p><p>
<a href="#top">Back</a><hr><a name="Nop"><H4>Nop</H4></a>
</p><p>format:	#nop [string]
</p><p>A null operation, is ignored by the client.  It is useful for commenting in your coms file, any text after the nop and before a semicolon or end of line is ignored.
</p><p>example:
</p><p>#nop This is the start of my autoactions
</p>
<a href="#top">Back</a><hr><a name="Openwin"><H4>Openwin</H4></a>
<p>format:	#openwin {number} {title}
</p><p>This command is used to open 'special windows' which can display selected text from the active session. For example if your mud has a 'gossip' command, you can create a 'gossip' window which just shows you the gossip lines and nothing else. You could have another one for lines that were related to your group and so on. You can have up to 7 special windows, in addition to the main Wintin 95 window.
</p><p>You set up special windows as follows.  First of all, use the #openwin command to define the window. You tell it the window number and the title of the window. Then use highlight_highlight to specify the lines which you want to be sent to the special window.
</p><p>Examples  (see highlight_highlight as well)
</p><p>#openwin {1} {Gossip}
</p><p>#highlight {61} {%0 gossips-- %1}
</p><p>The first command opens a special window (number 1) and titles it 'Gossip'. The second command sends all lines of the form
</p><p>xxx gossips-- yyyyyyyy
</p><p>to this special window, as well as displaying them in the main window.
</p>
<a href="#top">Back</a><hr><a name="Path"><H4>Path</H4></a>
<p>format:	#path
</p><p>Show your current path.
</p>
<a href="#top">Back</a><hr><a name="Pathdir"><H4>Pathdir</H4></a>
<p>format:	#pathdir {odd_dir} {what speedwalk should interpret it as}
</p><p>This command will allow those who play on muds that have diagonal./odd directions to use speedwalk. 
</p><p>example:
</p><p>#pathdir {nw} {nw} 
</p><p>each time {nw} is encountered in the speedwalk, Wintin 95 will send a {nw} to the mud.
</p>
<a href="#top">Back</a><hr><a name="Presub"><H4>Presub</H4></a>
<p>format:	#presub
</p><p>Toggle whether actions are processed before substitutes, or after.  With presub on, actions are performed on the substituted buffer, and if you are gagging heavily, it will increase the speed of execution.  There are also many times you don't want to check for actions on lines you have gagged, and this will allow that.
</p>
<a href="#top">Back</a><hr><a name="Push"><H4>Push</H4></a>
<p>format:	#push {variable} {value}
</p><p>Add an element onto the end of a list variable. A list variable is just an ordinary variable in which 'elements' are separated by commas. Push adds a new element onto the list, automatically inserting the comma.
</p><p>You can 'pop' elements off the list by referring to the list with the special @ syntax - see the example below. The '@' calls up the last element in the list, and then removes it from the list after use.
</p><p>Example:
</p><p>#var {foo} {fee, fie}
</p><p>#push {$foo} {foe }
</p><p>#showme $foo
</p><p>fee, fie, foe
</p><p>#showme $@foo
</p><p>foe
</p><p>#showme $@foo
</p><p>fie
</p><p>#showme $foo
</p><p>fee
</p>
<a href="#top">Back</a><hr><a name="Redraw"><H4>Redraw</H4></a>
<p>format:	#redraw
</p><p>If redraw is on, and you're not in split mode, the input line will be redrawn when any text arrives, or Wintin 95 prints any messages.  This helps you avoid your input being spread out and unreadable when there is heavy text flow from the mud.  In split mode, this variable is ignored.
</p>
<a href="#top">Back</a><hr><a name="Retab"><H4>Retab</H4></a>
<p>format:	#retab
</p><p>#retab re-loads the tab completion file.
</p>
<a href="#top">Back</a><hr><a name="Return"><H4>Return</H4></a>
<p>format:	#return
</p><p>Pop the last move off the top of the path, and move the opposite direction.
</p>
<a href="#top">Back</a><hr><a name="Read"><H4>Read</H4></a>
<p>format:	#read {filename}
</p><p>Reads a coms file into memory.  The coms file is merged in with the currently loaded commands.  Duplicate commands are overwritten.
</p>
<a href="#top">Back</a><hr><a name="Remove"><H4>Remove</H4></a>
<p>format:	#rmove {list} {element}
</p><p>Removes the specified element from a list, if present. No error message is generated if the element is not in the list.
</p><p>Example:
</p><p>#var {foo} {fee, fie, foe, fum}
</p><p>#remove {foo} {fie}
</p><p>#showme $foo
</p><p>fee, foe, fum
</p>
<a href="#top">Back</a><hr><a name="Savepath"><H4>Savepath</H4></a>
<p>format:	#savepath {alias name}
</p><p>Save the current path to an alias, which can then be saved to a coms file. The alias name provided will be the new name of the alias to represent that path.  Useful for after mapping to be able to get back to the place again.
</p>
<a href="#top">Back</a><hr><a name="Select"><H4>Select</H4></a>
<p>format:	#select {listname,mode,current} {commands}
</p><p>Select pulls an element out of a list and runs commands on it, in much the same way as #loop.
</p><p>Listname is the name of the list
</p><p>Mode is either next or prev
</p><p>Current is an element in the list
</p><p>Select will extract from the list the element immediately before or after current, depending on the mode setting. It will set the variable %0 equal to this element, and then process the specified commands.
</p><p>Select loops around the elements, for example if the current element is the last in the list, requesting the next element will produce the first.
</p><p>Example:
</p><p>#var healer tony
</p><p>#var heals {tony, bill, fred}
</p><p>#alias nextheal {#select {heals, next, $healer} {#var healer %0; grouptell current healer is: %0}}
</p><p>#alias prevheal {#select {heals, prev, $healer} {#var healer %0; grouptell Oops, healer is still: %0}}
</p><p>
<a href="#top">Back</a><hr><a name="Session"><H4>Session</H4></a>
</p><p>format:	#session <name> <hostname> <port>
</p><p>or	#session <name> <ipaddress> <port>
</p><p>or	#session <name> async,1,9600,8,n,1
</p><p>or	#session
</p><p>The Session command starts a session with a mud.
</p><p>You can have as many open sessions as you want, but only one is the 'active' session at any particular point. Anything you type is sent to the active session only (but see all_all), and only text received from the active session is displayed in the windows (but see snoop_snoop). You can see which sessions you currently have open by typing #session on its own.
</p><p>You give each session a name when you start it. You can switch to a session at any point by typing its name preceded by a # (or whatever the active Wintin 95 character is at the time).
</p><p>To start a session, use the first two forms shown above if you are using Wintin 95 over an IP connection (that is to say that your PC is connected to the Internet, either directly or via PPP or SLIP). Use the third form (the async form ) if you are using Wintin 95 to communicate with a host over a serial line and a modem.
</p><p>The parameters you pass in the async form tell Wintin 95 which com port to use, and then specify the speed, data bits, type of parity and number of stop bits. Some examples are given below. Generally speaking you should use a speed that is a bit higher than the maximum speed your modem can work at, to allow for compression, and either 8,n,1 or 7,e,1. 
</p><p>The async command will leave you talking to the modem on the specified com port. It is then up to you to give the modem the necessary commands (ATDT etc) to call the host, and then type whatever it takes to log in to the mud.
</p><p>When you are using Wintin 95 through a com port, you may well find that everything you type is displayed on the screen twice: this is because Wintin 95 echoes the characters back to you as you type, and most hosts will echo everything back as they receive it. You will notice that Wintin 95 is echoing the command as you type it, whereas the host echoes it back after any aliases and so on have been processed. To avoid this double echo, see if the host you connect to has a command which will suppress its echo (this is typically used with 'simplex' terminals).
</p><p>examples:
</p><p>#ses ai ai.eecs.ukans.edu 6101		connect to port 6101 on ai.eecs.ukans.edu
</p><p>#ses ai 129.237.80.129 6101		connect to port 6101 at ip address 129.237.80.129
</p><p>#ses ai async,1,38400,8,n,1		connect to COM1 at 38400 baud, 8-n-1
</p><p>#ses ai async,3,9600,7,e,1		connect to COM3 at 9600 baud, 7-e-1
</p>
<a href="#top">Back</a><hr><a name="Showme"><H4>Showme</H4></a>
<p>format: #showme {string}
</p><p>Display the string to the terminal, do not send to the mud.  Useful for
</p><p>status, warnings, etc.  
</p><p>example:
</p><p>#action {%0 ultraslays you} {#showme {#####argh! we were ultraslayed ######}}
</p>
<a href="#top">Back</a><hr><a name="Snoop"><H4>Snoop</H4></a>
<p>format: #snoop {session name}
</p><p>If there are multiple sessions open, this command allows you to see what is going on the the sessions that are not currently active.  The lines of text from other sessions will be prefixed by 'session name%'.
</p>
<a href="#top">Back</a><hr><a name="Sound"><H4>Sound</H4></a>
<p>format: #sound {file name}
<p>Plays the sound from the specified file. The file can be in any registered format such as .wav or midi.
</p>
<a href="#top">Back</a><hr><a name="Speedwalk"><H4>Speedwalk</H4></a>
</p><p>format:	#speedwalk
</p><p>Toggle speedwalking on and off.  Speedwalking allows you to type multiple directions not seperated by semicolons, and now it lets you prefix a direction with a number, to signify how many times to go that direction.
</p><p>example:
</p><p>without speedwalk:
</p><p>s;s;w;w;w;w;w;s;s;s;w;w;w;n;n;w
</p><p>with speedwalk:
</p><p>2s5w3s3w2nw
</p><p>
<a href="#top">Back</a><hr><a name="Split"><H4>Split</H4></a>
</p><p>format:	#split 
</p><p>The Split command opens a new window, Input, and directs all keyboard input to that window so that you can see it without it being muddled up with text received from the Mud.
</p>
<a href="#top">Back</a><hr><a name="Substitute"><H4>Substitute</H4></a>
<p>format:	#substitute [{text}] [{new text}]
</p><p>The [] signify optional arguments.
</p><p>Allows you to replace original text from the mud with different text, or delete it altogether.  This is helpful for if you have a slow modem, or there is a lot of text sent during battles, and the like.  the %0-9 variables can be used to capture text and use it as part of the new output, and the ^ char is valid to only check the beginning of the line for the text specified.
</p><p>If a . is the only character in the new text argument, if the line is matched, it will be deleted.
</p><p>If only one argument is given, all subs that match the string are displayed. The * char is valid in this instance.  See wildcard_wildcard.
</p><p>If no argument is given, all subs are displayed.
</p><p>examples:
</p><p>#sub {leaves} {.} 
</p><p>gag any line that has the word 'leaves' in it.
</p><p>#sub {^Zoe%0} {ZOE%0}
</p><p>any line that starts with the name Zoe will be replaced by a line that
</p><p>starts with 'ZOE'
</p><p>#sub {%0massacres%1} {%0MASSACRES%1}
</p><p>replace all occurrences of 'massacres' with 'MASSACRES'
</p>
<a href="#top">Back</a><hr><a name="Suspend"><H4>Suspend</H4></a>
<p>format:	#suspend
</p><p>The Tintin++ Suspend command is not supported by Wintin 95.
</p>
<a href="#top">Back</a><hr><a name="System"><H4>System</H4></a>
<p>format:        #system {command}
</p><p>The Tintin++ System command is not supported by Wintin 95.  
</p>
<a href="#top">Back</a><hr><a name="Tabadd"><H4>Tabadd</H4></a>
<p>format:	#tabadd {word}
</p><p>Adds a word to the end of the tab completion list.
</p>
<a href="#top">Back</a><hr><a name="Tabdelete"><H4>Tabdelete</H4></a>
<p>format:	#tabdelete {word}
</p><p>Deletes a word from the tab completion list.
</p>
<a href="#top">Back</a><hr><a name="Tablist"><H4>Tablist</H4></a>
<p>format:	#tablist
</p><p>Displays all words in the tab completion list.
</p><p>
<a href="#top">Back</a><hr><a name="Textin"><H4>Textin</H4></a>
</p><p>format:	#textin {filename}
</p><p>Textin now allows the user to read in a file, and send its contents directly to the mud.  Useful for doing online creation, or message writing.
</p><p>
<a href="#top">Back</a><hr><a name="Tick"><H4>Tick</H4></a>
</p><p>format: #tick
</p><p>Show seconds until next tick.
</p><p>
<a href="#top">Back</a><hr><a name="Tickoff"><H4>Tickoff</H4></a>
</p><p>format:	#tickoff
</p><p>Turn off the Wintin 95 built in tick counter.
</p><p>
<a href="#top">Back</a><hr><a name="Tickset"><H4>Tickset</H4></a>
</p><p>format:	#tickset [{seconds}]
</p><p>Turn on the Wintin 95 tickcounter, and set time until next tick equal to tick size.
</p><p>If you specify the optional 'seconds' parameter, the ticker will only be reset if it is currently within that many seconds of a tick.
</p><p>Eg #tickset 10 - reset the ticker if we are currently within 10 seconds of a tick.
</p><p>The 'seconds' parameter is useful if you want to use an increase in mana or movement to detect a tick: it will eliminate false resets caused by a long gap between prompts when you are idle.
</p><p>Here is an example based on a prompt of the form <645hp 330ma 162mv>
</p><p>#message variable
</p><p>#var oldmv
</p><p>#var newmv
</p><p>#alias newmv {#if {%%1 > $oldmv} {#showme ..TICK..;#tickset 10};#var oldmv %1}
</p><p>#alias newma {#if {%%1 > $oldma} {#showme ..TICK..;#tickset 10};#var oldma %1}
</p><p>#action {^&lt;%0hp %1ma %2mv>} {newma $1;newmv $2}
</p>
<a href="#top">Back</a><hr><a name="Ticksize"><H4>Ticksize</H4></a>
<p>format:	#ticksize number
</p><p>Set a new time, in seconds,  between ticks for the Wintin 95 tickcounter.
</p>
<a href="#top">Back</a><hr><a name="Tolower"><H4>Tolower</H4></a>
<p>format:	#tolower var text
</p><p>Just like the #variable command, only it converts the text to lowercase before assigning it to the variable.
</p>
<a href="#top">Back</a><hr><a name="Togglesubs"><H4>Togglesubs</H4></a>
<p>format:	#togglesubs
</p><p>Toggle whether substitutes should be ignored.  If subs are ignored, text will not be checked for subs, but highlights will still be checked for.
</p>
<a href="#top">Back</a><hr><a name="Toupper"><H4>Toupper</H4></a>
<p>format:	#toupper var text
</p><p>Just like the #variable command, only it converts the text to uppercase before assigning it to the variable.
</p>
<a href="#top">Back</a><hr><a name="Unaction"><H4>Unaction</H4></a>
<p>format:	#unaction {string}
</p><p>Remove action(s) from the action list which match {string}.  The '*' character will act as a wildcard and will match any text.See help wildcard.
</p><p>examples:
</p><p>#unaction {%0tells you%1}
</p><p>remove the action that is triggered by '%0tells you%1'
</p><p>#unaction *
</p><p>remove all actions
</p><p>#unaction {*massacre*}
</p><p>remove all actions that contain the word 'massacre'
</p>
<a href="#top">Back</a><hr><a name="Unalias"><H4>Unalias</H4></a>
<p>format:	#unalias {word}
</p><p>Remove alias(es) from the alias list which match {word}.  The '*' character will act as a wildcard and will match any text.See help wildcard.
</p><p>examples:
</p><p>#unalias {bbb}
</p><p>remove the alias 'bbb'
</p><p>#unalias *
</p><p>remove all aliases
</p><p>#unalias {*go*}
</p><p>remove all aliases that contain the fragment 'go'
</p>
<a href="#top">Back</a><hr><a name="Unantisubstitute"><H4>Unantisubstitute</H4></a>
<p>format: #unantisubstitute {string
</p><p>Remove antisub(s) from the antisub list which match {string}.  The '*' character will act as a wildcard and will match any text. See wildcard_wildcard
</p><p>examples:
</p><p>#unantisub {%0tells you%1}
</p><p>remove the antisub for '%0tells you%1'
</p><p>#unantisub *
</p><p>remove all antisubs
</p><p>#unantisub {^You*}
</p><p>remove all antisubs that start with '^You'
</p>
<a href="#top">Back</a><hr><a name="Ungag"><H4>Ungag</H4></a>
<p>format:        #ungag {string}
</p><p>Exactly the same as <a href="#unsubstitute">unsubstitute</a>.
</p>
<a href="#top">Back</a><hr><a name="Unsubstitute"><H4>Unsubstitute</H4></a>
<p>format:	#unsubstitute {string}
</p><p>Remove substitute(s) from the substitute list which match {string}.  The '*' character will act as a wildcard and will match any text. See wildcard_wildcard
</p><p>examples:
</p><p>#unsub {%0tells you%1}
</p><p>remove the sub for '%0tells you%1'
</p><p>#unsub *
</p><p>remove all subs
</p><p>#unsub {^You*}
</p><p>remove all subs that start with '^You'
</p><p>
<a href="#top">Back</a><hr><a name="Unhighlight"><H4>Unhighlight</H4></a>
</p><p>format:	#unhighlight {string}
</p><p>Remove highlight(s) from the highlight list which match {string}.  The '*' character will act as a wildcard and will match any text. See wildcard_wildcard.
</p><p>examples:
</p><p>#unhigh {%0tells you%1}
</p><p>remove the highlight for '%0tells you%1'
</p><p>#unhigh *
</p><p>remove all highlights
</p><p>#unhigh {^You*}
</p><p>remove all highlights that start with '^You'
</p><p>
<a href="#top">Back</a><hr><a name="Unpath"><H4>Unpath</H4></a>
</p><p>format:	#unpath
</p><p>Remove the most recent move from the current path.
</p><p>
<a href="#top">Back</a><hr><a name="Unsplit"><H4>Unsplit</H4></a>
</p><p>format:	#unsplit
</p><p>The Unsplit command causes keyboard text to be directed to the Wintin window as opposed to the separate Input window.
</p><p>
<a href="#top">Back</a><hr><a name="Unvariable"><H4>Unvariable</H4></a>
</p><p>format:	#unvariable {variable name}
</p><p>#unalias variable name
</p><p>Remove variable(s) from the variable list which match {variable name}.  The '*' character will act as a wildcard and will match any text. See wildcard_wildcard.
</p><p>examples:
</p><p>#unvar {hp}
</p><p>remove the variable $hp
</p><p>#unvar *
</p><p>remove all variables
</p><p>#unvariable {xx*}
</p><p>remove all variables that start with 'xx'
</p><p>
<a href="#top">Back</a><hr><a name="Update"><H4>Update</H4></a>
</p><p>format:	#update
</p><p>This command toggles the 'update common lists' mode on and off. When update mode is on, every time a session dies the current variables, actions, aliases and other settings are copied back to the common lists so that they are applied to any new sessions started. This is useful if you maintain variables with the group leader's name and so on which you don't want to lose if your link goes down in mid session.
</p><p>When update mode is off, any changes are discarded when the session drops - this is the behaviour of tintin++ and is appropriate if you connect to several muds simultaneously with different aliases for each.
</p><p>
<a href="#top">Back</a><hr><a name="Variable"><H4>Variable</H4></a>
</p><p>format:	#variable {<variable_name>} {<text to fill variable>}
</p><p>These variables differ from the %0-9 in the fact that you can specify a full word as a variable name, and they stay in memory for the full session, unless they are changed, and they can be saved in the coms file, and can be set to different values if you have 2 or more sessions running at the same time.  One of the best uses for variables is for spellcasters.
</p><p>Without variables, you would set up a bunch of aliases like the following.
</p><p>#alias {flame} {cast 'flame strike' %0}
</p><p>#alias {flash} {cast 'call lightning' %0}
</p><p>#alias {harm} {cast 'harm' %0}
</p><p>With the new variables you can do the following:
</p><p>#alias {targ} {#var target %0}
</p><p>#alias {flamet} {flame $target}
</p><p>#alias {flasht} {flash $target} 
</p><p>#alias {harmt} {harm $target}
</p><p>these aliases will be  defined just as they are written, the variables are not substituted  for until the  alias is found  in your input  and executed.
</p><p>so, if before a battle, you do a:
</p><p>targ donjonkeeper
</p><p>then $target is set to donjonkeeper, and any alias you set up with $target in it will substitute donjonkeeper for every instance of $target.  Let's say your leader has the following alias set up.
</p><p>#alias {setttarg} {#var {target} {%0};gt target=%0}
</p><p>if he did a settarg lich, it would set his $target to lich, and would send a:
</p><p><name> tells your group 'target=lich'
</p><p>you could then set an action like so.
</p><p>#action {^%0 tells your group 'target=%1'} {targ %1}
</p><p>then when your leader executed his alias, it would also set your variable to the target.
</p><p>Another use for variables would be to set a variable $buffer to whoever the current buffer is.  This would be useful in fights where the mob switches, or where many rescues are needed.  You could set up healing aliases with $buffer in them, and set the $buffer variable in an action that is triggered by each switch, and each rescue, or just rescues, or whatever.  Then in a confusing battle, you will have a better shot at healing the right person.
</p><p>There is a predefined variable $time which is set equal to the number of seconds since Wintin started. You can use this to time things (by recording a start time and an end time in different variables). Possible uses are:
? </p><p>use with an experience point counter to calculate xp gained per hour
? </p><p>construct a lag timer (send a command to the mud, time how long it takes to get a reply, keep a running count)
? </p><p>limit an action so that it happens at most once every so many seconds (useful for building an action that happens just once per round in a fight).
</p><p>
<a href="#top">Back</a><hr><a name="Verbatim"><H4>Verbatim</H4></a>
</p><p>format:	#verbatim
</p><p>Toggle verbatim mode on and off.  When in verbatim mode, text will not be parsed, and will be sent 'as is' to the mud.  Tab completion and history scrolling are still available in verbatim mode.  It is helpful for writing messages, doing online creation, and the like.
</p><p>
<a href="#top">Back</a><hr><a name="Version"><H4>Version</H4></a>
</p><p>format:	#version
</p><p>Show the version number of Wintin 95 that you are currently running.
</p><p>
<a href="#top">Back</a><hr><a name="Wildcard"><H4>Wildcard</H4></a>
</p><p>format:		#command {regexp}
</p><p>You may use wildcards with certain commands such as #alias, #action, #substitute, #unalias, etc.  In commands like #alias, wildcards are only valid when you use exactly one argument.  Wildcards are always valid for commands like #unalias.  The only wildcard currently supported is *, which matches any string 0 or more characters long. The wildcard meaning of * may be escaped using the backslash, \.
</p><p>Examples:
</p><p>#action {*miss*}
</p><p>	shows all actions which contain the word miss in them
</p><p>#unaction {*miss*}
</p><p>	removes all actions which contain the word miss in them
</p><p>#unaction {\*\*\* PRESS RETURN:}
</p><p>	removes the action which triggers on the line *** PRESS RETURN:
</p>
<a href="#top">Back</a><hr><a name="Wizlist"><H4>Wizlist</H4></a>
<p>format:	#wizlist
</p><p>Lists the names of people who helped with with mudding, and with the client.If you feel your name should be here, let me know, so many people have contributed, and it's hard to name everyone.
</p><p>
<a href="#top">Back</a><hr><a name="Write"><H4>Write</H4></a>
</p><p>format:	#write {filename}
</p><p>#write filename
</p><p>Writes all current actions, aliases, subs, antisubs, highlights, and variables to a coms file, specified by filename.  
</p><p>
<a href="#top">Back</a><hr><a name="Writesession"><H4>Writesession</H4></a>
</p><p>format:	#writesession {filename}
</p><p>#writesession filename
</p><p>Write all current actions, aliases, subs, antisubs, highlights, and variables that are specific to your current session to a file.  This means actions that were not defined when there was no session active.
</p><p>
<a href="#top">Back</a><hr><a name="Zap"><H4>Zap</H4></a>
</p><p>format:	#zap
</p><p>Kill your current session.  If there is no current session, it will cause the program to terminate.
</p><p>
